//!
//! generated by flatc-zig
//! binary:     gen/home/travis/Downloads/flatbuffers/reflection/reflection.bfbs
//! schema:     /home/travis/Downloads/flatbuffers/reflection/reflection.fbs
//! file ident: //reflection.fbs
//! typename    reflection.Service
//!

const std = @import("std");
const fb = @import("flatbufferz");
const Builder = fb.Builder;

// a namespace generated by flatc-zig to match typenames produced by flatc
const reflection = struct {
    const RPCCall = @import("RPCCall.fb.zig").RPCCall;
    const RPCCallT = @import("RPCCall.fb.zig").RPCCallT;
    const Service = @import("Service.fb.zig").Service;
    const ServiceT = @import("Service.fb.zig").ServiceT;
    const KeyValue = @import("KeyValue.fb.zig").KeyValue;
    const KeyValueT = @import("KeyValue.fb.zig").KeyValueT;
};

pub const Service = struct {
    _tab: fb.Table,

    pub fn GetRootAs(buf: []u8, offset: u32) reflection.Service {
        const n = fb.encode.read(u32, buf[offset..]);
        return reflection.Service.init(buf, n + offset);
    }

    pub fn GetSizePrefixedRootAs(buf: []u8, offset: u32) reflection.Service {
        const n = fb.encode.read(u32, buf[offset + fb.Builder.size_u32 ..]);
        return reflection.Service.init(buf, n + offset + fb.Builder.size_u32);
    }

    pub fn init(bytes: []u8, pos: u32) Service {
        return .{ ._tab = .{ .bytes = bytes, .pos = pos } };
    }

    pub fn Table(x: Service) fb.Table {
        return x._tab;
    }

    pub fn Name(rcv: Service) []const u8 {
        const o = rcv._tab.offset(4);
        if (o != 0) {
            return rcv._tab.byteVector(o + rcv._tab.pos);
        }
        return "";
    }

    pub fn KeyCompare(o1: u32, o2: u32, buf: []u8) bool {
        const obj1 = Service.init(buf, @as(u32, @intCast(buf.len)) - o1);
        const obj2 = Service.init(buf, @as(u32, @intCast(buf.len)) - o2);
        return std.mem.lessThan(u8, obj1.Name(), obj2.Name());
    }

    pub fn LookupByKey(rcv: *Service, key: []const u8, vector_loc: u32, buf: []u8) bool {
        var span = fb.encode.read(u32, buf[vector_loc - 4 ..][0..4]);
        var start: u32 = 0;
        while (span != 0) {
            var middle = span / 2;
            const table_off = fb.getIndirectOffset(buf, vector_loc + 4 * (start + middle));
            const obj = Service.init(buf, table_off);
            const order = std.mem.order(u8, obj.Name(), key);
            if (order == .gt) {
                span = middle;
            } else if (order == .lt) {
                middle += 1;
                start += middle;
                span -= middle;
            } else {
                rcv.* = Service.init(buf, table_off);
                return true;
            }
        }
        return false;
    }

    pub fn Calls(rcv: Service, j: usize) ?reflection.RPCCall {
        const o = rcv._tab.offset(6);
        if (o != 0) {
            var x = rcv._tab.vector(o);
            x += @as(u32, @intCast(j)) * 4;
            x = rcv._tab.indirect(x);
            return reflection.RPCCall.init(rcv._tab.bytes, x);
        }
        return null;
    }

    pub fn CallsByKey(rcv: Service, obj: *reflection.RPCCall, key: []const u8) bool {
        const o = rcv._tab.offset(6);
        if (o != 0) {
            const x = rcv._tab.vector(o);
            return obj.LookupByKey(key, x, rcv._tab.bytes);
        }
        return false;
    }

    pub fn CallsLen(rcv: Service) u32 {
        const o = rcv._tab.offset(6);
        if (o != 0) {
            return rcv._tab.vectorLen(o);
        }
        return 0;
    }

    pub fn Attributes(rcv: Service, j: usize) ?reflection.KeyValue {
        const o = rcv._tab.offset(8);
        if (o != 0) {
            var x = rcv._tab.vector(o);
            x += @as(u32, @intCast(j)) * 4;
            x = rcv._tab.indirect(x);
            return reflection.KeyValue.init(rcv._tab.bytes, x);
        }
        return null;
    }

    pub fn AttributesByKey(rcv: Service, obj: *reflection.KeyValue, key: []const u8) bool {
        const o = rcv._tab.offset(8);
        if (o != 0) {
            const x = rcv._tab.vector(o);
            return obj.LookupByKey(key, x, rcv._tab.bytes);
        }
        return false;
    }

    pub fn AttributesLen(rcv: Service) u32 {
        const o = rcv._tab.offset(8);
        if (o != 0) {
            return rcv._tab.vectorLen(o);
        }
        return 0;
    }

    pub fn Documentation(rcv: Service, j: usize) ?[]const u8 {
        const o = rcv._tab.offset(10);
        if (o != 0) {
            const a = rcv._tab.vector(o);
            return rcv._tab.byteVector(a + @as(u32, @intCast(j)) * 4);
        }
        return "";
    }

    pub fn DocumentationLen(rcv: Service) u32 {
        const o = rcv._tab.offset(10);
        if (o != 0) {
            return rcv._tab.vectorLen(o);
        }
        return 0;
    }

    /// File that this Service is declared in.
    pub fn DeclarationFile(rcv: Service) []const u8 {
        const o = rcv._tab.offset(12);
        if (o != 0) {
            return rcv._tab.byteVector(o + rcv._tab.pos);
        }
        return "";
    }

    pub fn Start(__builder: *Builder) !void {
        try __builder.startObject(5);
    }
    pub fn AddName(__builder: *Builder, name: u32) !void {
        try __builder.prependSlotUOff(0, name, 0);
    }

    pub fn AddCalls(__builder: *Builder, calls: u32) !void {
        try __builder.prependSlotUOff(1, calls, 0);
    }

    pub fn StartCallsVector(__builder: *Builder, num_elems: i32) !u32 {
        return __builder.startVector(4, num_elems, 1);
    }
    pub fn AddAttributes(__builder: *Builder, attributes: u32) !void {
        try __builder.prependSlotUOff(2, attributes, 0);
    }

    pub fn StartAttributesVector(__builder: *Builder, num_elems: i32) !u32 {
        return __builder.startVector(4, num_elems, 1);
    }
    pub fn AddDocumentation(__builder: *Builder, documentation: u32) !void {
        try __builder.prependSlotUOff(3, documentation, 0);
    }

    pub fn StartDocumentationVector(__builder: *Builder, num_elems: i32) !u32 {
        return __builder.startVector(4, num_elems, 4);
    }
    pub fn AddDeclarationFile(__builder: *Builder, declaration_file: u32) !void {
        try __builder.prependSlotUOff(4, declaration_file, 0);
    }

    pub fn End(__builder: *Builder) !u32 {
        return __builder.endObject();
    }
};
