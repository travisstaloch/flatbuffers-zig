//!
//! generated by flatc-zig
//! binary:     gen/home/travis/Downloads/flatbuffers/reflection/reflection.bfbs
//! schema:     /home/travis/Downloads/flatbuffers/reflection/reflection.fbs
//! file ident: //reflection.fbs
//! typename    reflection.KeyValue
//!

const std = @import("std");
const fb = @import("flatbufferz");
const Builder = fb.Builder;

// a namespace generated by flatc-zig to match typenames produced by flatc
const reflection = struct {
    const KeyValue = @import("KeyValue.fb.zig").KeyValue;
    const KeyValueT = @import("KeyValue.fb.zig").KeyValueT;
};

pub const KeyValue = struct {
    _tab: fb.Table,

    pub fn GetRootAs(buf: []u8, offset: u32) reflection.KeyValue {
        const n = fb.encode.read(u32, buf[offset..]);
        return reflection.KeyValue.init(buf, n + offset);
    }

    pub fn GetSizePrefixedRootAs(buf: []u8, offset: u32) reflection.KeyValue {
        const n = fb.encode.read(u32, buf[offset + fb.Builder.size_u32 ..]);
        return reflection.KeyValue.init(buf, n + offset + fb.Builder.size_u32);
    }

    pub fn init(bytes: []u8, pos: u32) KeyValue {
        return .{ ._tab = .{ .bytes = bytes, .pos = pos } };
    }

    pub fn Table(x: KeyValue) fb.Table {
        return x._tab;
    }

    pub fn Key(rcv: KeyValue) []const u8 {
        const o = rcv._tab.offset(4);
        if (o != 0) {
            return rcv._tab.byteVector(o + rcv._tab.pos);
        }
        return "";
    }

    pub fn KeyCompare(o1: u32, o2: u32, buf: []u8) bool {
        const obj1 = KeyValue.init(buf, @as(u32, @intCast(buf.len)) - o1);
        const obj2 = KeyValue.init(buf, @as(u32, @intCast(buf.len)) - o2);
        return std.mem.lessThan(u8, obj1.Key(), obj2.Key());
    }

    pub fn LookupByKey(rcv: *KeyValue, key: []const u8, vector_loc: u32, buf: []u8) bool {
        var span = fb.encode.read(u32, buf[vector_loc - 4 ..][0..4]);
        var start: u32 = 0;
        while (span != 0) {
            var middle = span / 2;
            const table_off = fb.getIndirectOffset(buf, vector_loc + 4 * (start + middle));
            const obj = KeyValue.init(buf, table_off);
            const order = std.mem.order(u8, obj.Key(), key);
            if (order == .gt) {
                span = middle;
            } else if (order == .lt) {
                middle += 1;
                start += middle;
                span -= middle;
            } else {
                rcv.* = KeyValue.init(buf, table_off);
                return true;
            }
        }
        return false;
    }

    pub fn Value(rcv: KeyValue) []const u8 {
        const o = rcv._tab.offset(6);
        if (o != 0) {
            return rcv._tab.byteVector(o + rcv._tab.pos);
        }
        return "";
    }

    pub fn Start(__builder: *Builder) !void {
        try __builder.startObject(2);
    }
    pub fn AddKey(__builder: *Builder, key: u32) !void {
        try __builder.prependSlotUOff(0, key, 0);
    }

    pub fn AddValue(__builder: *Builder, value: u32) !void {
        try __builder.prependSlotUOff(1, value, 0);
    }

    pub fn End(__builder: *Builder) !u32 {
        return __builder.endObject();
    }
};
